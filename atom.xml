<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[To Boldly Code...]]></title>
  <link href="http://boldlycoding.com/atom.xml" rel="self"/>
  <link href="http://boldlycoding.com/"/>
  <updated>2015-03-18T02:58:09-04:00</updated>
  <id>http://boldlycoding.com/</id>
  <author>
    <name><![CDATA[George McDaid]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Collecting and Processing Tweets]]></title>
    <link href="http://boldlycoding.com/blog/2015/03/17/collecting-and-processing-tweets/"/>
    <updated>2015-03-17T17:55:55-04:00</updated>
    <id>http://boldlycoding.com/blog/2015/03/17/collecting-and-processing-tweets</id>
    <content type="html"><![CDATA[<!-- more -->


<p><img class="center" src="http://boldlycoding.com/images/tweet_process.png" width="1000" height="400" title="Tweet collection and processing" ></p>

<h2>Collecting the Tweets</h2>

<p>Tweet collection is driven the Apache project Flume. Flume collects, aggregates, and moves variable amounts of streaming data. The data can be from a variety of sources including server and other logs. Flume overall is very flexible and customisable based on the particular application. It not only support multiple sources, but also multiple processing mediums, or channels. Here channels are where the data in question is stored before being being written to its final destination, or sink. Flume captures data from a source, and stores it in a channel before finally writing the data to the sink. Channels can be in memory, in a file, or files, or a combination of the two. The logical structure of the source, channel and sink, is an agent. A flume agent that captures web server data and writes it to a Hadoop HDFs would logically look like the following</p>

<p><img class="center" src="http://boldlycoding.com/images/flume_agent.png" width="540" height="440" title="A typical flume agent" ></p>

<p>As discussed in a previous post, I have installed Cloudera&rsquo;s CDH in my cluster. The CDH allows for convenient definition of Flume Agent. After selecting the Flume service and clicking the Configuration tab, property Configuration File can be searched for. My agent definition was</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TwitterAgent.sources = Twitter
</span><span class='line'>TwitterAgent.channels = MemChannel
</span><span class='line'>TwitterAgent.sinks = HDFS
</span><span class='line'> 
</span><span class='line'>TwitterAgent.sources.Twitter.type = com.boldlycoding.twitterstreaming.TrendingStream
</span><span class='line'>TwitterAgent.sources.Twitter.channels = MemChannel
</span><span class='line'>
</span><span class='line'>TwitterAgent.sinks.HDFS.channel = MemChannel
</span><span class='line'>TwitterAgent.sinks.HDFS.type = hdfs
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.path = hdfs://typhlosion:8020/user/flume/tweets/%Y/%m/%d/%H/
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.fileType = DataStream
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.writeFormat = Text
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.batchSize = 80
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.rollSize = 0
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.rollCount = 100
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.rollInterval = 120
</span><span class='line'>TwitterAgent.sinks.HDFS.hdfs.minBlockReplicas = 1
</span><span class='line'> 
</span><span class='line'>TwitterAgent.channels.MemChannel.type = memory
</span><span class='line'>TwitterAgent.channels.MemChannel.capacity = 10000
</span><span class='line'>TwitterAgent.channels.MemChannel.transactionCapacity = 100</span></code></pre></td></tr></table></div></figure>


<p>This Flume agent definition uses a custom flume source defined in my uploaded jar. The channel is a Memory Channel, meaning all the tweets will be placed in memory before being written to the sink, which here is the Hadoop HDFS. All of the tweets are written in a text format. The agent also writes 100 tweets to each file before starting a new file, and will automatically close a file after 2 minutes even if 100 tweets have not been written. The memory channel is defined with a capacity of 10,000 tweets and 100 tweets will be move in/out of the channel at a time. The HDFS path parameter defines where on the HDFS the files will be written and the percent signs and characters at the end of the path indicate the directories will be created based on the timestamp of each tweet.</p>

<p>To do the actual capturing, processing, and dispatching to the memory channel, I have defined a custom Flume source by extending the Flume abstract source, access credentials withheld.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class TrendingStream extends AbstractSource implements EventDrivenSource, Configurable {
</span><span class='line'>
</span><span class='line'>    Authentication auth;
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void start() {
</span><span class='line'>        final ChannelProcessor channel = getChannelProcessor();
</span><span class='line'>        final BlockingQueue&lt;String&gt; queue = new LinkedBlockingQueue&lt;String&gt;(10000);
</span><span class='line'>        StatusesFilterEndpoint endpoint = new StatusesFilterEndpoint();
</span><span class='line'>        ArrayList&lt;String&gt; filter_trends = Lists.newArrayList("college", "university", "uni", "school", "higher education", "grad school");
</span><span class='line'>        endpoint.trackTerms(filter_trends);
</span><span class='line'>        Client client = new ClientBuilder()
</span><span class='line'>                .hosts(Constants.STREAM_HOST)
</span><span class='line'>                .endpoint(endpoint)
</span><span class='line'>                .authentication(auth)
</span><span class='line'>                .processor(new StringDelimitedProcessor(queue))
</span><span class='line'>                .build();
</span><span class='line'>        client.connect();
</span><span class='line'>        final JsonParser jsonParser = new JsonParser();
</span><span class='line'>        final Map&lt;String, String&gt; headers = new HashMap&lt;String, String&gt;();
</span><span class='line'>
</span><span class='line'>        TwitterThread tweam = new TwitterThread() {
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void run() {
</span><span class='line'>                for (int msgRead = 0; msgRead &lt; 1000; msgRead++) {
</span><span class='line'>                    try {
</span><span class='line'>                        String msg = queue.take();
</span><span class='line'>                        msg = msg.replace("\n", "").replace("\r", "").replace("\\n", "");
</span><span class='line'>                        msg = msg.replaceAll("\\\\\"", "");
</span><span class='line'>                        msg = msg.replaceAll("\\\\","");
</span><span class='line'>                        msg = msg.replaceAll("/","");
</span><span class='line'>                        //System.out.println(msg);
</span><span class='line'>                        JsonObject user = jsonParser.parse(msg)
</span><span class='line'>                                .getAsJsonObject().get("user")
</span><span class='line'>                                .getAsJsonObject();
</span><span class='line'>                        String zone = user.get("time_zone").getAsString();
</span><span class='line'>                        //System.out.println(zone);
</span><span class='line'>                        msg = msg.trim();
</span><span class='line'>                        headers.put("timestamp", String.valueOf(new Date().getTime()));
</span><span class='line'>                    Event event = EventBuilder.withBody(msg.getBytes(), headers);
</span><span class='line'>                    channel.processEvent(event);
</span><span class='line'>                    } catch (InterruptedException ex) {
</span><span class='line'>                        Logger.getLogger(TrendingStream.class.getName()).log(Level.SEVERE, null, ex);
</span><span class='line'>                    } catch (UnsupportedOperationException ex) {
</span><span class='line'>                        msgRead--;
</span><span class='line'>                    } catch (NullPointerException ex) {
</span><span class='line'>                        msgRead--;
</span><span class='line'>                        try {
</span><span class='line'>                            Thread.sleep(2000);
</span><span class='line'>                        } catch (InterruptedException ex1) {
</span><span class='line'>                            System.out.println("Thread Interrupt");
</span><span class='line'>                        }
</span><span class='line'>                    }
</span><span class='line'>
</span><span class='line'>                    if (msgRead &lt;= -10000) {
</span><span class='line'>                        break;
</span><span class='line'>                    }
</span><span class='line'>
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>
</span><span class='line'>        tweam.run();
</span><span class='line'>
</span><span class='line'>        super.start();
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void configure(Context cntxt) {
</span><span class='line'>        auth = new OAuth1("consumerKey", "consumerSecret", "token", "tokenSecret");
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    @Override
</span><span class='line'>    public void stop() {
</span><span class='line'>        super.stop();
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>The source begins by defining a Flume channel processor, blocking queue, and a filtering status endpoint. The processor and queue and more obvious. The filtering status endpoint captures live tweets, and applies a set of filtering terms. A tweets must contain all the terms in one of the items in the set. For instance, referencing the set in the previous code snippet, a tweet with the work college would be captured. A tweet containing higher education would be captured as well, but a tweet only containing the word higher or education would not.</p>

<p>In this code snippet the loop would capture 1000 tweets before stopping. When a tweet is captured the code filters out backslashes, double backslashes, forward slashes, and new lines from the JSON data format of the tweet. This is important because if they are not filtered out it causes the JSON parser to throw and error and is unable to process the tweets. This was one of the more difficult points to discover, and filtering out all the necessary characters was an extremely iterative process. After the tweet is cleaned, the tweet is checked for a valid (non-blank) time zone which allows for regionalization of the sentiment data (It is interesting to note that since Twitter is built on Ruby all of the timezone options are the same as those that are found in Ruby). Through the course of the study I have noted that about half of tweets have an invalid time zone. If a valid time zone is not found, the loop is set back an iteration. This allows for the specified number of tweets to be captured. Also, to avoid an infinite loop the loop control variable is check for a large negative value, and a break is issued if a large value is found. This should be relative to the number of tweets that need to be captured. Finally, the tweet data is stamped with a timestamp and it is passed to the channel processor. The settings in the Flume Agent configuration then control how the channel handles placing the events into the sink. This was another very difficult part of the project to configure as the channel must be set up so it is not overwhelmed by the speed of incoming tweets.</p>

<h2>Processing the Tweets</h2>

<p>To process the sentiment data in the Hadoop HDFS Hive (provided with Cloudera CDH) is used. Hive is an Apache project that provides a SQL interface for querying the Hadoop HDFS. The run the SQL queries, Hive runs MapReduce jobs taking advantage of the other distributed Hadoop component. The following Hive script analyzes the Tweet data and produces several new tables the last of which contains the required sentiment data.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DROP TABLE tweets_raw;
</span><span class='line'>DROP TABLE dictionary;
</span><span class='line'>DROP TABLE time_zone_map;
</span><span class='line'>DROP VIEW tweets_simple;
</span><span class='line'>DROP VIEW l1;
</span><span class='line'>DROP VIEW l2;
</span><span class='line'>DROP VIEW l3;
</span><span class='line'>DROP TABLE tweets_sentiment;
</span><span class='line'>DROP TABLE tweetsbi;
</span><span class='line'>
</span><span class='line'>CREATE EXTERNAL TABLE tweets_raw (
</span><span class='line'>   id BIGINT,
</span><span class='line'>   created_at STRING,
</span><span class='line'>   source STRING,
</span><span class='line'>   favorited BOOLEAN,
</span><span class='line'>   retweet_count INT,
</span><span class='line'>   retweeted_status STRUCT&lt;
</span><span class='line'>      text:STRING,
</span><span class='line'>      user:STRUCT&lt;screen_name:STRING,name:STRING&gt;&gt;,
</span><span class='line'>   entities STRUCT&lt;
</span><span class='line'>      urls:ARRAY&lt;STRUCT&lt;expanded_url:STRING&gt;&gt;,
</span><span class='line'>      user_mentions:ARRAY&lt;STRUCT&lt;screen_name:STRING,name:STRING&gt;&gt;,
</span><span class='line'>      hashtags:ARRAY&lt;STRUCT&lt;text:STRING&gt;&gt;&gt;,
</span><span class='line'>   text STRING,
</span><span class='line'>   user STRUCT&lt;
</span><span class='line'>      screen_name:STRING,
</span><span class='line'>      name:STRING,
</span><span class='line'>      friends_count:INT,
</span><span class='line'>      followers_count:INT,
</span><span class='line'>      statuses_count:INT,
</span><span class='line'>      verified:BOOLEAN,
</span><span class='line'>      utc_offset:STRING, -- was INT but nulls are strings
</span><span class='line'>      time_zone:STRING&gt;
</span><span class='line'>)
</span><span class='line'>ROW FORMAT SERDE 'com.cloudera.hive.serde.JSONSerDe'
</span><span class='line'>LOCATION '/user/flume/tweets'
</span><span class='line'>;
</span><span class='line'>
</span><span class='line'>-- create sentiment dictionary
</span><span class='line'>CREATE EXTERNAL TABLE dictionary (
</span><span class='line'>    type string,
</span><span class='line'>    length int,
</span><span class='line'>    word string,
</span><span class='line'>    pos string,
</span><span class='line'>    stemmed string,
</span><span class='line'>    polarity string
</span><span class='line'>)
</span><span class='line'>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
</span><span class='line'>STORED AS TEXTFILE
</span><span class='line'>LOCATION '/user/home/gmcdaid/data/dictionary';
</span><span class='line'>
</span><span class='line'>CREATE EXTERNAL TABLE time_zone_map (
</span><span class='line'>    time_zone string,
</span><span class='line'>    country string,
</span><span class='line'>    notes string
</span><span class='line'>)
</span><span class='line'>ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t' 
</span><span class='line'>STORED AS TEXTFILE
</span><span class='line'>LOCATION '/user/home/gmcdaid/data/time_zone_map';
</span><span class='line'>
</span><span class='line'>CREATE VIEW tweets_simple AS
</span><span class='line'>SELECT
</span><span class='line'>  id,
</span><span class='line'>  cast ( from_unixtime( unix_timestamp(concat( '2015 ', substring(created_at,5,15)), 'yyyy MMM dd hh:mm:ss')) as timestamp) ts,
</span><span class='line'>  text,
</span><span class='line'>  time_zone_map.country
</span><span class='line'>FROM tweets_raw
</span><span class='line'>JOIN time_zone_map ON tweets_raw.user.time_zone = time_zone_map.time_zone
</span><span class='line'>;
</span><span class='line'>
</span><span class='line'>create view l1 as select id, words from tweets_simple lateral view explode(sentences(lower(text))) dummy as words;
</span><span class='line'>create view l2 as select id, word from l1 lateral view explode( words ) dummy as word ;
</span><span class='line'>
</span><span class='line'>create view l3 as select 
</span><span class='line'>    id, 
</span><span class='line'>    l2.word, 
</span><span class='line'>    case d.polarity 
</span><span class='line'>      when  'negative' then -1
</span><span class='line'>      when 'positive' then 1 
</span><span class='line'>      else 0 end as polarity 
</span><span class='line'> from l2 left outer join dictionary d on l2.word = d.word;
</span><span class='line'> 
</span><span class='line'>create table tweets_sentiment stored as orc as select 
</span><span class='line'>id, 
</span><span class='line'>case 
</span><span class='line'>when sum( polarity ) &gt; 0 then 'positive' 
</span><span class='line'>when sum( polarity ) &lt; 0 then 'negative'  
</span><span class='line'>else 'neutral' end as sentiment 
</span><span class='line'>from l3 group by id;
</span><span class='line'>
</span><span class='line'>CREATE TABLE tweetsbi 
</span><span class='line'>STORED AS ORC
</span><span class='line'>AS
</span><span class='line'>SELECT 
</span><span class='line'>  t.*,
</span><span class='line'>  case s.sentiment 
</span><span class='line'>    when 'positive' then 2 
</span><span class='line'>    when 'neutral' then 1 
</span><span class='line'>    when 'negative' then 0 
</span><span class='line'>  end as sentiment  
</span><span class='line'>FROM tweets_simple t JOIN tweets_sentiment s on t.id = s.id;</span></code></pre></td></tr></table></div></figure>


<p>This script has a multitude of intermediate steps. It begins by creating a table containing all the raw Twitter information. The accommodate all the nested structures in the JSON Hive provides ARRAY and STRUCT structures. The table specifies a SERDE and LOCATION, the location leaves all the data on the file system instead of importing it. The SERDE clause instructs the table to parse the data using the specified serializer/deseralizer. This is a generic piece of code provided by Cloudera to process JSON data. Next, the script creates the dictionary and time zone tables. The dictionary contains all of the words to be analysed and their associated sentiment values. This is sometimes referred to as a lexicon. The time zone table maps the twitter time zones to generic regions. The list was created using the list of time zones that Ruby supports. After this, the script creates a simpler tweets table containing only the required information. Following this three lateral views are created to analyse the twitter data using the information from the dictionary file. The final two steps reorganize the data and create more readable tables. Positive sentiment becomes a 2, neutral sentiment is a 1, and negative sentiment is a 0. Following processing all of the tweet data, the data can be presented, in a later post I will discuss using PHP and Google charts to present the data.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel and Advanced Routing to Controllers]]></title>
    <link href="http://boldlycoding.com/blog/2015/03/13/laravel-and-advanced-routing-to-controllers/"/>
    <updated>2015-03-13T03:08:01-04:00</updated>
    <id>http://boldlycoding.com/blog/2015/03/13/laravel-and-advanced-routing-to-controllers</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Following the previous discussion of routes and controllers, there are other constructs within the Laravel framework that are also worth noting.</p>

<h2>Parameter Constraints</h2>

<p>Laravel allows for constraints to be placed on route parameters, which were discussed in the previous post. Parameter constraints are more basic to type than route filters, but just as powerful. Route parameter constraints are implemented using regular expressions listed with an accompanying parameter name. Before a request is passed to the controller within a route function, the parameter must satisfy the regular expression.</p>

<p>The first route must only be alphabetical, while the second must be numerical. Laravel will only dispatch a request to these routes if the parameter meets the regular expression.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('user/{name}', function($name)
</span><span class='line'>{
</span><span class='line'>    //
</span><span class='line'>})
</span><span class='line'>-&gt;where('name', '[A-Za-z]+');
</span><span class='line'>
</span><span class='line'>Route::get('user/{id}', function($id)
</span><span class='line'>{
</span><span class='line'>    //
</span><span class='line'>})
</span><span class='line'>-&gt;where('id', '[0-9]+');</span></code></pre></td></tr></table></div></figure>


<p>The routes can also be combined and pass an array of constraints</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('user/{id}/{name}', function($id, $name)
</span><span class='line'>{
</span><span class='line'>    //
</span><span class='line'>})
</span><span class='line'>-&gt;where(['id' =&gt; '[0-9]+', 'name' =&gt; '[a-z]+'])</span></code></pre></td></tr></table></div></figure>


<p>Although not this it is not found within the routing file, it is useful to note the <em>firstOrFail</em> and <em>findOrFail</em> functions here. These functions are used to find data within a table using an identifier, when the record is not found, an exception is thrown. This failure can then propagate up to a 404 error page, and no routing or redirection is needed within the controller. <em>findOrFail($id)</em> is used when the identifier being used is the primary key, <em>firstOrFail()</em> is used when the identifier is not the primary key.</p>

<p>This function will fail if the content identifier does not exist. The error can be caught in the app&rsquo;s config file and a 404 view can be presented.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function getContent($content = null){
</span><span class='line'>  $view = View::make('content');
</span><span class='line'>  
</span><span class='line'>  $content = Content::findOrFail($id);
</span><span class='line'>  
</span><span class='line'>  $view-&gt;with('content', $content);
</span><span class='line'>  
</span><span class='line'>  return $view;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Another variation with the <em>firstOrFail</em> function, here the primary key is not used. The content URL is compared to other URLs in the database.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function getContent($url = null)
</span><span class='line'>{
</span><span class='line'>  
</span><span class='line'>      $view = View::make('content');
</span><span class='line'>      
</span><span class='line'>      $content = Content::where('url', '=', $url)-&gt;firstOrFail();
</span><span class='line'>      
</span><span class='line'>      $view-&gt;with('content', $content);
</span><span class='line'>      
</span><span class='line'>      return $view;
</span><span class='line'>      
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Routing Groups</h2>

<p>When a routing filter needs to be applied to multiple routes, it is useful to implement this as a route group. When routes are grouped, for an route within the group to be accessed, the filter must be satisfied. This is incredibly useful when creating pages that all require the user to be authenticated. A route group is setup in the following way</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::group(array('before' =&gt; 'authed'), function()
</span><span class='line'>{
</span><span class='line'>    Route::get('/account/landing', array('as' =&gt; 'myprotech', 'uses' =&gt; 'AccountController@getLanding'));
</span><span class='line'>    
</span><span class='line'>    Route::get('/account/courses', array('as' =&gt; 'student_courses', 'uses' =&gt; 'AccountController@getStudentCourses'));
</span><span class='line'>    
</span><span class='line'>    Route::get('/account/student_account', array('as' =&gt; 'student_account', 'uses' =&gt; 'AccountController@getStudentAccount'));
</span><span class='line'>});
</span><span class='line'>
</span><span class='line'>Route::filter('authed', function()
</span><span class='line'>{
</span><span class='line'>    if (!Auth::check())
</span><span class='line'>    {
</span><span class='line'>        Session::flash('message', 'You must login to view this page.');
</span><span class='line'>        return Redirect::guest(route('display_login'));
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>The route group accepts an array with the filter name(s) and a function that contains the routes. Within the routing group, to access any of the three routes, the <em>authed</em> filter must be satisfied, This filter checks to ensure the current user is logged in. If the user is not logged in, a message is flashed for the next session, and they are redirected to the login screen. Here the Redirect::guest function is used to when valid credentials are supplied, the user if logged in and they are redirected to their original destination. This is a very elegant solution to a common control structure, and simplifies site code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel Routing and Controllers]]></title>
    <link href="http://boldlycoding.com/blog/2015/02/27/laravel-routing-and-controllers/"/>
    <updated>2015-02-27T22:33:01-05:00</updated>
    <id>http://boldlycoding.com/blog/2015/02/27/laravel-routing-and-controllers</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Routing</h2>

<p>Routing in Laravel is the process of taking HTTP requests, like GET and POST, taking the appropiate action. This is frequently routing the request to a controller. Laravel houses route definitions in</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>app/routes.php</span></code></pre></td></tr></table></div></figure>


<p>Routes in this file can respond to one, many, or all HTTP request verbs.</p>

<p>This would respond to POST:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::post('/', function()
</span><span class='line'>{
</span><span class='line'>    return 'POST: Hello World';
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>This route responds to GET and POST:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::match(array('GET', 'POST'), '/', function()
</span><span class='line'>{
</span><span class='line'>    return 'GET & POST: Hello World';
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>These two previous route examples do not register names with the route handlers. This makes it slightly less easy to refer to the routes in view, to create URLs. It is a beneficial practice to always associative a name with a declared route. To declare a named route in Laravel</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('/account/my_account', array('as' =&gt; 'my_account', function()
</span><span class='line'>{
</span><span class='line'>    return 'GET "my_account" route: Hello World';
</span><span class='line'>}));</span></code></pre></td></tr></table></div></figure>


<p>This route responds to the GET verb for requests to /account/my_account. The route can be referred to with the following in views to create URLs that would link to the named route</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>URL::route('my_account');</span></code></pre></td></tr></table></div></figure>


<p>Although all these basic routes have their uses, often URL parameters are required for the effective operation of a page. A route with a parameter is declared as</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('/account/my_account/{id}', array('as' =&gt; 'my_account', function()
</span><span class='line'>{
</span><span class='line'>    return 'GET "my_account" route: ' . $id;
</span><span class='line'>}));</span></code></pre></td></tr></table></div></figure>


<p>This route requires the request have an id parameter. A parameter is optional if followed by a &lsquo;?&rsquo;. In this case there was no question mark after if, so the parameter is required.</p>

<p>One other useful construct that can be attached to routes is the filter. Filters allow preprocessing of a HTTP request before it gets routed to a particular location, like a controller. This is useful for processes like authentication checks. To declare a filter that would check if the user is authenticated</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::filter('auth', function()
</span><span class='line'>{
</span><span class='line'>    if (!Auth::user())
</span><span class='line'>    {
</span><span class='line'>        return Redirect::to('sign_in');
</span><span class='line'>    }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>This filter can then be applied to a route</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('my_account', array('before' =&gt; 'auth', function()
</span><span class='line'>{
</span><span class='line'>    return 'Account Info';
</span><span class='line'>}));</span></code></pre></td></tr></table></div></figure>


<p>When the filter is applied to that route, it will ensure that all users accessing the my_account page are logged in. If the user is not logged in, they are redirected to the sign_in page.</p>

<p>All of the previously detailed routes had string or route returns, it is much more common to have routes that direct to controllers.</p>

<h2>Controllers</h2>

<p>Controllers in Laravel function similarly to controllers in other MVC structures. They get data from the model (the database), process this data, and the pass it to a Laravel view. The controller may also do other preliminary processing like user authentication or key validation. The first step to using a Laravel controller is declaring a route to the controller</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Route::get('/', array('as' =&gt; 'home', 'uses' =&gt; 'HomeController@getIndex'));</span></code></pre></td></tr></table></div></figure>


<p>This is a basic example that declares a named route &lsquo;home&rsquo; that responds to all GET requests to the index page and routes them to the getIndex method in the HomeController. After declaring this route the HomeController file should be created in the app/controllers directory. An appropiate controller would look something like the following</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?php
</span><span class='line'>
</span><span class='line'>class HomeController extends BaseController {
</span><span class='line'>
</span><span class='line'>  public function getIndex()
</span><span class='line'>  {
</span><span class='line'>      
</span><span class='line'>            $view = View::make('home');
</span><span class='line'>
</span><span class='line'>          return $view;
</span><span class='line'>            
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>?&gt;</span></code></pre></td></tr></table></div></figure>


<p>This controller contains the needed getIndex method and in this method the &lsquo;home&rsquo; view is created and returned. A more advanced method may include a database call</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function getIndex()
</span><span class='line'>  {
</span><span class='line'>      
</span><span class='line'>            $view = View::make('home');
</span><span class='line'>
</span><span class='line'>          $content = Content::where('display', '=', 1)-&gt;get();
</span><span class='line'>          $view-&gt;with('content', $content);
</span><span class='line'>
</span><span class='line'>          return $view;
</span><span class='line'>            
</span><span class='line'>  }</span></code></pre></td></tr></table></div></figure>


<p>The get index method now queries the database for all content that should be displayed. The data is passed to the created view using the &lsquo;with&rsquo; method. The first parameter is the variable name the view will use to refer to the data and the second parameter is the data itself. A more advanced view would include many more methods to handle several associated request. An account controller could have sign in, sign out, get sign in page, and get account methods.</p>

<p>Another useful construct that can be inserted into controller methods in the Redirect. Redirects do just what their name says, redirected. One possible use case is redirection after authentication.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public function postSignIn(){
</span><span class='line'>  $email = Input::get('email');
</span><span class='line'>  $password = Input::get('password');
</span><span class='line'>
</span><span class='line'>  if (Auth::attempt(array('email' =&gt; $email, 'password' =&gt; $password)))
</span><span class='line'>  {
</span><span class='line'>      Session::flash('message', 'You have been logged in.');
</span><span class='line'>      return Redirect::intended(route('home'));
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  Session::flash('message', 'Your credentials are invalid.');
</span><span class='line'>  return Redirect::to(route('display_login'));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>These are the structures that I found most useful for my project. I valued the control found with explicitly defining routes to controllers. Laravel offers many other variation and tools with controller that are detailed <a href="http://laravel.com/docs/4.2/controllers" title="Laravel Controllers">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel and Blade]]></title>
    <link href="http://boldlycoding.com/blog/2015/02/16/laravel-and-blade/"/>
    <updated>2015-02-16T13:38:10-05:00</updated>
    <id>http://boldlycoding.com/blog/2015/02/16/laravel-and-blade</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>What is Blade?</h2>

<p>Blade is a template engine that comes with the Laravel framework. Blade is incredibly useful because it provides control structures, layout inheritance, and function definitions. The control structures keep to code simple, but retain the power of raw PHP control structures.</p>

<h2>How to use it.</h2>

<p>The simplest Blade structure allow for the echoing of information. In addition to echoing the information, Laravel escapes the content to prevent malicious code execution. With raw PHP, the opening and closing tags would be needed in addition to a function call for output cleaning. The blade syntax is</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Blade content {{ $content }} </span></code></pre></td></tr></table></div></figure>


<p>Blade allows for extension of this syntax with existence checking. This becomes very useful when outputting content from a database. If there are nulls or empty strings, the defined string will be output.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{{ isset($content) ? $content : 'No Content' }} </span></code></pre></td></tr></table></div></figure>


<p>Beyond these simple structures, Blade provides support for more advanced control structures like if statements and loops. To construct an if statement (and declare other Blade keywords), the @ symbol us used</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@if ($fish == "1")
</span><span class='line'>    One Fish
</span><span class='line'>@elseif ($fish == "2")
</span><span class='line'>    Two Fish
</span><span class='line'>@elseif ($fish == "red")
</span><span class='line'>    Red Fish
</span><span class='line'>@elseif ($fish == "blue")
</span><span class='line'>    Blue Fish
</span><span class='line'>@else
</span><span class='line'>    Not a fish
</span><span class='line'>@endif</span></code></pre></td></tr></table></div></figure>


<p>Blade also provide support for for, foreach, forelse, and while loops. The foreach loop is frequently used after fetching information from the database to output it to the user.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@foreach ($all_fish as fish)
</span><span class='line'>    &lt;p&gt;{{ $fish-&gt;type }} Fish&lt;/p&gt;
</span><span class='line'>@endforeach </span></code></pre></td></tr></table></div></figure>


<p>Although no significant additional functionality is provided, the blade structures ensure the code remains clean and readable. This will improve debug time and improvements and maintenance in the future.</p>

<p>Blade is also very powerful because it provides support for inheritance of layouts. For instance, a a base layout could be defined with all the basic information. The HTML tags, head tags, style information needed for all pages, and anything else that can be included for all pages. This base layout can be included in other layouts, moreover content can be injected from the child to the parent layout. A base layout could be defined, another layout for generic content pages and additional layouts for specialized content all injecting content into the base layout and inheriting its structure.</p>

<p>The parent layout</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;!-- views/layouts/base.blade.php --&gt;
</span><span class='line'>
</span><span class='line'>&lt;html&gt;
</span><span class='line'>  &lt;head&gt;
</span><span class='line'>      &lt;link rel="stylesheet" type="text/css" href="style_default.css"&gt;
</span><span class='line'>      @yield('css')
</span><span class='line'>  &lt;/head&gt;
</span><span class='line'>    &lt;body&gt;
</span><span class='line'>        &lt;div class="container"&gt;
</span><span class='line'>            @yield('content')
</span><span class='line'>        &lt;/div&gt;
</span><span class='line'>    &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>A child layout</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@extends('base.master')
</span><span class='line'>
</span><span class='line'>@section('css')
</span><span class='line'>    &lt;link rel="stylesheet" type="text/css" href="special_styles.css"&gt;
</span><span class='line'>@stop
</span><span class='line'>
</span><span class='line'>@section('content')
</span><span class='line'>    &lt;p&gt;This is my body content.&lt;/p&gt;
</span><span class='line'>@stop</span></code></pre></td></tr></table></div></figure>


<p>Finally, Blade support definition of custom function in the same way a function can be defined in PHP. The defined function is access using the @ sign, like when using other Blade keywords. This is very useful when defined common formatting or output procedures, like formatting a MySQL DATETIME for output to the user. The following piece of code will take a date/time input and convert it to a date formatted as a two digit month, a slash, and then the two digit day.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Blade::extend(function($view, $compiler)
</span><span class='line'>{
</span><span class='line'>    $pattern = $compiler-&gt;createMatcher('datetime');
</span><span class='line'>
</span><span class='line'>    return preg_replace($pattern, '$1&lt;?php echo $2-&gt;format(\'m/d\'); ?&gt;', $view);
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Trends]]></title>
    <link href="http://boldlycoding.com/blog/2015/02/11/twitter-trends/"/>
    <updated>2015-02-11T01:27:08-05:00</updated>
    <id>http://boldlycoding.com/blog/2015/02/11/twitter-trends</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Twitter defines trends as those topics which are popular now, not topics which have been popular for a long period of time. During the course of my project thus far I have been tracking trends and making observations about them. One interesting observation about Twitter trends is to volatility of the trends. Trends change on a frequent basis, which suggests an instability of conversation on Twitter. It is also interesting to note the
number of trends which are not of appreciable social, political or economic significance. From January to February 2015 trends included #ReplaceAMovieTitleWithGoat, #HappyBirthdayHarryStyles, #NationalPizzaDay, #RuinAFriendshipIn5Words and a number of other One Direction topics. The instability of trends and lack of politically, socially and economically trends does pose a problem for my project. To cope with this problem I have begun tracking trends every two minutes and reviewing the trends periodically. If a significant topic does begin to trends. I will be able to start tracking that trends and then analyse the related tweets. Twitter trends are also based on location. Twitter will tailor the trends displayed based on the location of the user. My project will focus on worldwide opinions and topics so this posed another temporary problem. The Twitter API allows for the acquisition of trends on a global scale. This list of trends is not influenced by any particular user&rsquo;s information or location. Overall, Trends tend to be very complex and will continue to shape the project towards it completion.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel and the Database]]></title>
    <link href="http://boldlycoding.com/blog/2015/02/10/laravel-and-the-database/"/>
    <updated>2015-02-10T23:13:31-05:00</updated>
    <id>http://boldlycoding.com/blog/2015/02/10/laravel-and-the-database</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Even before web development, Laravel begins bringing improvements to database operations. To improve development, Laravel provides a query builder, the Eloquent ORM, Migrations and Seeding. Although all these tools may not cater perfectly to every scenario encountered, the benefits tend to outweigh costs encountered.</p>

<h2>The Database Configuration</h2>

<p>Before any specific features are discussed, it is useful to be aware of Laravel&rsquo;s database configuration. The database configuration file is location in app/config/database.php. Here the default database can be selected and other database conncetions can be specified. Laravel supports connection with MySQL, Postgres, SQLite, and SQL Server. This file also set that table where Laravel will store its migrations. All database configuration options should be placed in this file.</p>

<h2>Laravel&rsquo;s Query Builder</h2>

<p>Laravel&rsquo;s query builder tends to be as powerful as raw SQL. It also protects against SQL injection so string cleaning is not necessary. Another benefit of the query builder is the simplicity and cleanliness of the code. A select statement can be done with the following line</p>

<pre><code>```
$users = DB::table('users')-&gt;get();
```
</code></pre>

<p>There is no need to specify a SQL string or have another call to run the query. The total number of characters is also reduced compared to the typical PHP/SQL implementation. All of the attributes are then accessed in the following fashion. This too is as simple as the select statement.</p>

<pre><code>```
foreach ($users as $user)
{
    var_dump($user-&gt;name);
}
```
</code></pre>

<p>A more advanced query may look like the follwing. It retains the simplicity of the former operations as well as the power of raw PHP/SQL.</p>

<pre><code>```
$users = DB::table('users')
                -&gt;orderBy('name', 'desc')
                -&gt;groupBy('count')
                -&gt;having('count', '&gt;', 100)
                -&gt;get();
```
</code></pre>

<p>The query builder also supports all of the other normal SQL functions, but all those will not be described here. One point where the query builder becomes somewhat more cumbersome than SQL is when an advanced where clause is needed. When such a clause is required, a closure must be used. A Laravel closure is an anonymous function used within another construct. The following shows an advanced where with a closure</p>

<pre><code>```
DB::table('users')
        -&gt;where('name', '=', 'John')
        -&gt;orWhere(function($query)
        {
            $query-&gt;where('votes', '&gt;', 100)
                  -&gt;where('title', '&lt;&gt;', 'Admin');
        })
        -&gt;get();
```
</code></pre>

<p>Overall, the query builder is much more organized than using raw PHP/SQL. Since everything is also implemented using OO concepts, mistakes are much less common. Operations will only be supported if they are valid for the current object in use. However, this the most basic way to interact with a database under the Laravel framework. The Eloquent ORM is much more advanced and provide more capabilities.</p>

<h2>Eloquent ORM</h2>

<p>Eloquent ORM is Laravel&rsquo;s implementation of an Active Record system. All tables in the database are tied to Models, so all table can be interacted with as objects. All models should be housed in the app/models directory. A basic sample model would look like the following</p>

<pre><code>```
class Vendor extends Model {

    protected $table = 'Vendor';

    public function product()
    {   
        return $this-&gt;hasMany('Product', 'product_id');
    }

}       
```
</code></pre>

<p>This is a basic model for Vendors and the relationship with Products is implemented with the hasMany function.</p>

<p>Then to interact with the model, this statement could be used</p>

<pre><code>```
$vendors = Vendor::all();
```
</code></pre>

<p>This returns all of the users in the form of objects. The attributes are retrieved in the same was as with the query builder. Although it retains the organization of the query builder, Eloquent ORM does not cater well to complex queries. I found myself frequently using elements of the basic query builder. Eloquent makes up for this with its relationship evaluation. Referencing the previous example, after getting the vendors, the products can be iterated over without any other queries. In Laravel this is called a dynamic property and is a huge advantage of the framework.</p>

<h2>Migrations</h2>

<p>One of the most useful database tools offered by Laravel is the migration. Laravel migration are version control for the database. When a change must be made to the database, a new migration is created. All migration have an up and down method that are run for migrate and rollback respectively. After editing the migration, all migration can be run with</p>

<pre><code>```
php artisan migrate
```
</code></pre>

<p>This is like pushing a series of commits with git.</p>

<p>To roll back run</p>

<pre><code>```
php artisan migrate:rollback
```
</code></pre>

<p>Migrations can be used to create the database and keep track of call changes that occur over the lifetime of a project. If a problem is encountered a roll back can be issued and another can be created to remedy the problem.</p>

<h2>Seeding</h2>

<p>Seeding is another useful feature Laravel provides although not extremely innovative. Seeding can be accomplished with a simple PHP script. Laravel does not provide any truly innovative or extremely capability. It is however useful for organization purposes to have to migrations and seeding script location in one place. it avoids the problem of dispersing scripts and functions across a webserver which happens with many projects. A typical migration consists of the following</p>

<pre><code>```
class UserTableSeeder extends Seeder {

    public function run()
    {
        DB::table('users')-&gt;delete();

        User::create(array('email' =&gt; 'foo@bar.com'));
    }

}
```
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up the Development Environment]]></title>
    <link href="http://boldlycoding.com/blog/2015/02/10/setting-up-the-development-environment/"/>
    <updated>2015-02-10T20:21:10-05:00</updated>
    <id>http://boldlycoding.com/blog/2015/02/10/setting-up-the-development-environment</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>What is the Homestead and Vagrant?</h2>

<p>Homestead and Vagrant are two separate products the aid the development of Laravel applications. Before Homestead is discussed in detail, it is useful to have an understanding of Vagrant.</p>

<p>Vagrant is used to automate and simplify the construction of development environments that are portable, lightweight and easy to duplicate. Normally the process of setting up a development environment consists of creating a virtual disk, mounting an ISO, going through an OS installation and installing all required packages (This process frequently needs to be done more than once given how unstable certain development environment are). Vagrant&rsquo;s pre-built environment are known as <em>boxes</em>. After a box is added to the local vagrant installation and started it supports operations including SSH, folder syncing, and web host setup. With vagrant, boxes are downloaded with all the setup done in advance. The box is added to vagrant via command line and the <em>up</em> command is called. The process is much shorter and many degrees simpler then the normal process without vagrant. Since boxes are downloaded already set up, this also creates identical environments if multiple developers are involved on a project. Developing a project in identical environments create code that is much more stable and likely to run in a production environment (If the development environment is similar to that of production). Now that a basic understanding of Vagrant has been established, the Homestead can be discussed.</p>

<p>The Homestead is a Vagrant box produced by Taylor Otwell, the creator of Laravel. Since the Homestead was created by the &ldquo;creator,&rdquo; it is much more stable and well suited to Laravel development than a ordinary setup. Less configuration is all required since much of that has been done already. The Homestead includes Ubuntu 14.04, PHP, Nginx web server, and MySQL, configured and ready for development from startup (There are other included software packages but these are the most notable for my project).</p>

<h2>Installing the Homestead</h2>

<ol>
<li><p>To use the Homestead, <a href="https://www.virtualbox.org/wiki/Downloads" title="Install VirtualBox">VirtualBox</a> and <a href="http://www.vagrantup.com/downloads.html" title="Install Vagrant">Vagrant</a> must be installed.</p></li>
<li><p>Next, the Laravel Homestead box must be added to the local vagrant installation. This is done with the following command</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant box add laravel/homestead</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Following the download of the Homestead box, the Homestead CLI to start, stop, and modify the Homestead box must be installed. This can be done with composer and PHP or by cloning the git repo. I do not like to have a PHP installation running on my local machine, so I insatlled it via the git repo. To clone the repo use the following command (Be sure to clone the repo to a central location where most laraval applications can be found)</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/laravel/homestead.git Homestead</span></code></pre></td></tr></table></div></figure>


<p>To create the Homestead configuration file, run (The file Homestead.yaml will be created in ~/.homestead)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bash init.sh</span></code></pre></td></tr></table></div></figure>


<p>Next the SSH key must be set up using the ssh-keygen command. I selected the default file name and path so the Homestead.yaml file would not need to be edited.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-keygen -t rsa -C "gmcdaid@homestead"</span></code></pre></td></tr></table></div></figure>


<p>After configuring the SSH Key, shared folders need to be set up. Shared folder are shared between the OS and Vagrant Box. A change made on the local file system will be instantly reflected in that of the Vagrant Box. This is a very useful feature included in the Vagrant work flow. To configure folder sharing, edit the Homestead.yaml file to reflect something like the following (The mapping is from the local machine to the vagrant box)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>folders:
</span><span class='line'>    - map: C:\\laravel\\code
</span><span class='line'>      to: /home/vagrant/Code/</span></code></pre></td></tr></table></div></figure>


<p>Now, sites for the Homestead need to be configured. Sites operate much like Virtual Hosts with Apache. Specified URLs get mapped to a particular directory on the filsystem. When a request is made to a URL the web server on the Homestead box will server pages in the specified directory. Mapping for sites is similar to mapping for folders</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sites:
</span><span class='line'>    - map: homestead.app
</span><span class='line'>      to: /home/vagrant/Code/laravel/public</span></code></pre></td></tr></table></div></figure>


<p>Both sites and folders can have multiple entries. And something found in folders does not need to be in sites. If PHP scripts need to be run but not in a web browser, a folder mapping can be created without a site map.</p>

<p>The only software package not included in the Homstead which is necessary to my personal work flow is phpMyAdmin. Luckily, it was not hard to install. (The install process assumes Laravel projects are in /home/vagrant/Code)</p>

<p>First run</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install phpmyadmin (Do not select apache or lighttpd, just continue)</span></code></pre></td></tr></table></div></figure>


<p>Then</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ~/Code && serve phpmyadmin.app /usr/share/phpmyadmin/</span></code></pre></td></tr></table></div></figure>


<p>Finally, the following should be added to the hosts file on the main machine</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1 phpmyadmin.app</span></code></pre></td></tr></table></div></figure>


<p>Start the Homestead box with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vagrant up</span></code></pre></td></tr></table></div></figure>


<p>The phpMyAdmin interface should now be available at <a href="http://phpmyadmin.app:8000/" title="phpMyAdmin">http://phpmyadmin.app:8000/</a>. The default username/password is homestead/secret.</p>

<p>Laravel&rsquo;s homestead environment is now fully configured and ready for development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel as an Enterprise PHP Framework]]></title>
    <link href="http://boldlycoding.com/blog/2015/02/06/laravel-as-an-enterprise-php-framework/"/>
    <updated>2015-02-06T20:45:11-05:00</updated>
    <id>http://boldlycoding.com/blog/2015/02/06/laravel-as-an-enterprise-php-framework</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Why Did I Start This?</h2>

<p>As a senior project at Lock Haven University, I intend to study Laravel as an enterprise PHP framework. Frameworks claim to promote consistency, reduce repetition, simplify implementation, and speed development. I intend to evaluate these claims using knowledge gained from past internships and development experiences. I will conduct my evaluation by implementing a website using the Laravel framework and comparing the experience to past projects.</p>

<h2>What is Laravel? </h2>

<p><img class="right" src="http://boldlycoding.com/images/laravel.jpg" width="250" height="150" title="Laravl logo" alt="Laravel logo">Laravel has come into popularity quite recently. Taylor Otwell initially released Laravel in 2012. As of November 2014, GitHub indicates that the Laravel framework is the most popular PHP project. During the development of Laravel, features were drawn from many other popular frameworks including Yii, ASP.NET MVC, Ruby on Rails, Sinatra, and CodeIgniter. Laravel is a MVC framework, with distinct PHP files for each component.</p>

<h2>Laravel&rsquo;s Features</h2>

<p>Laravel includes many features to speed the development process.</p>

<ul>
<li>MVC, as previously mentioned, it is a Model View Controller Framework</li>
<li>Routing, to direct incoming requests to appropriate views</li>
<li>Eloquent ORM, an objected oriented interface for DB tables</li>
<li>Migrations, version control for databases</li>
<li>Seeding, invokable scripts to inject test data</li>
<li>Blade, a template engine that supports inheritance of layouts</li>
</ul>


<p>There are many other features beyond these, but this list includes some of the most notable items. Many of these features are reflected by the directory structure of the application (thus embracing simplicity).</p>

<p><img class="center" src="http://boldlycoding.com/images/laravel_app_structure.png" width="420" height="340" title="Laravel directory structure" ></p>

<p>There are directories to house the models, views, and controllers. The database migrations and seeders also reside in their own directories. In the root of the application directory, there is a routes PHP file. This file has all of the routing information for the website which routes requests to appropriate controllers. From conceptual to physical design, Laravel is geared towards development.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Cloudera Manager]]></title>
    <link href="http://boldlycoding.com/blog/2014/12/29/installing-cloudera-manager/"/>
    <updated>2014-12-29T08:47:51-05:00</updated>
    <id>http://boldlycoding.com/blog/2014/12/29/installing-cloudera-manager</id>
    <content type="html"><![CDATA[<!-- more -->


<p>Cloudera Manager (CM) will install the Oracle JDK, CDH (runs Hadoop), and other service management software. The manager administrates many services including HDFS, YARN, ZooKeeper, Oozie, Hive, Hue, Sqoop, HBase, Impala, Solr and Spark. Many of these can be installed only if they are needed. The CM installation process includes a section to select all or a subset of the services.</p>

<ol>
<li><p>Start a tmux session with</p>

<pre><code class="`"> tmux
</code></pre>

<p> In the event of a disconnect reconnect to the machine and run</p>

<pre><code class="`"> tmux a
</code></pre>

<p> Tmux will try to attach to a previously running session.</p></li>
<li><p>Download and start the Cloudera Manager installer on the cluster manager</p>

<pre><code class="`"> wget http://archive.cloudera.com/cm5/installer/latest/cloudera-manager-installer.bin
 chmod u+x cloudera-manager-installer.bin
 sudo ./cloudera-manager-installer.bin
</code></pre></li>
<li><p>If the installation was started correctly, it should display what is shown in the screenshot below. Select <em>Next</em> to continue.</p>

<p> <img class="center" src="http://boldlycoding.com/images/cm/3_start.PNG" width="550" height="750" title="Select next" ></p></li>
<li><p>Accept the Cloudera license</p></li>
<li><p>Accept the Oracle binary license. The installer will proceed to install the Cloudera repository, gather files, and install the JDK followed by Cloudera Manager Server. Have patience as the installation can take some time.</p></li>
<li><p>When the installer finishes, it will indicate to open a web browser and navigate to the following url: <a href="http://localhost:7180/">http://localhost:7180/</a> The default username is <strong>admin</strong> and the password is <strong>admin</strong>. Open a web browser and use a url that will connect to the appropriate node in the cluster. After logging in, the installation will continue.</p>

<p> <img class="center" src="http://boldlycoding.com/images/cm/6_browser.PNG" width="550" height="750" title="Open a web browser" ></p></li>
<li><p>After signing in, the CM installer will displays a comparison of the different versions. Cloudera Express supports the goals of my project, if Enterprise is selected a trial will be provided for 60 days and then all features will return to the level of Cloudera Express. After reviewing the offerings, click your desired offering and then click continue.</p></li>
<li><p>CM displays the services available, click continue.</p></li>
<li><p>Now, all the nodes in the cluster will need to be selected. To select hosts, patterns are supported. Supported patters include</p>

<pre><code class="`"> 10.1.1.[1-4] -&gt; 10.1.1.1, 10.1.1.2, 10.1.1.3, 10.1.1.4
 host[1-3].network.com -&gt; host1.network.com, host2.network.com, host3.network.com
 host[07-10].network.com -&gt; host07.network.com, host08.network.com, host09.network.com, host10.network.com
</code></pre>

<p> My cluster has three hosts, and I chose to use IP address patterns. To select all the hosts I entered</p>

<pre><code class="`"> 10.1.0.[111-113]
</code></pre>

<p> If hosts are successfully found CM should display the following after clicking search</p>

<p> <img class="center" src="http://boldlycoding.com/images/cm/9_hosts.PNG" width="550" height="750" title="Hosts were found" ></p>

<p> If all the hosts were found, click continue, otherwise check the entered pattern/hostnames before continuing.</p></li>
<li><p>The CM installer will now confirm repository options, the defaults should be appropriate, so just click Continue.</p>

<p><img class="center" src="http://boldlycoding.com/images/cm/10_repo.PNG" width="550" height="750" title="Hosts were found" ></p></li>
<li><p>Next, the installer displays the Oracle license for the JDK. Click the check box at the bottom and then click Continue. Unless needed, the check box for Java Unlimited Strength Encryption Policy files does not need to be checked.</p></li>
<li><p>The installer will now ask if services should be installed in single user mode. To simplify the installation, <strong>do not</strong> click the check box and just click continue.</p></li>
<li><p>The installer will now need root SSH credentials. Ensure that root access via SSH on all hosts is possible and enter the appropriate credentials and port number. To simplify my own installation process, I have configured all root passwords in the cluster to be the same.</p>

<p><img class="center" src="http://boldlycoding.com/images/cm/13_ssh.PNG" width="550" height="750" title="Enter SSH info" ></p>

<p>After clicking continue, the installer will write needed files to all hosts in the cluster.</p></li>
<li><p>After the files have been written, the installer will indicate that operations have completed successfully. Click continue. If problems were encountered, an attempt to remove CM can be made and the installation restarted.</p>

<p><img class="center" src="http://boldlycoding.com/images/cm/14_cis.PNG" width="550" height="750" title="Cluster install successful" ></p></li>
<li><p>CM will now download, distribute and activate parcels on all hosts. After this process is complete, click Continue.</p>

<p><img class="center" src="http://boldlycoding.com/images/cm/15_parcel.PNG" width="550" height="750" title="Completed parcel distribution" ></p></li>
<li><p>Finally, CM will inspect all the hosts in the cluster. I do not recommend skipping this step. It will check for many common problems. If any are found, correct them. Otherwise, click finish to complete the CM installation.</p></li>
<li><p>Now CDH 5 services need to be selected. For my project I required HDFS, Hive, Hue (A great web interface for Hadoop administration) and YARN (Oozie will also be installed since Hue requires it). To install this subset of services, click the Custom Services radio button. Select the aforementioned services, and click Continue.</p></li>
<li><p>Cloudera Manager will next require that all roles in the cluster be delegated to nodes in the cluster. The master of the cluster should run all services except the HDFS DataNode and the YARN NodeManager. This would not be done in a production cluster as it would degrade performance of the services, but it is suitable for a test cluster. Ensure the master is also running the Cloudera Management Service, this was not selected to run on any nodes during my installation, but the ACtivity Monitor is a useful service to have running. After correctly delegating all the service to the nodes, click Continue.</p></li>
<li><p>The database needs to be configured for CM and CDH services. I prefer to use a MySQL database to maintain the necessary information. To configure MySQL for CM</p>

<p>Stop MySQL</p>

<pre><code>sudo service mysql stop
</code></pre>

<p>Edit <em>/etc/my.cnf</em></p>

<pre><code>sudo nano /etc/mysql/my.cnf
</code></pre>

<p>Change the file to the following (Keeping your own hardware restrictions in mind). Also, note max_connections, in a small cluster (&lt;50 nodes) this can be set to 250. In a larger cluster this can be set to 750.</p>

<pre><code>[mysqld]
transaction-isolation=READ-COMMITTED
# Disabling symbolic-links is recommended to prevent assorted security risks;
# to do so, uncomment this line:
# symbolic-links=0

key_buffer              = 16M
key_buffer_size         = 32M
max_allowed_packet      = 16M
thread_stack            = 256K
thread_cache_size       = 8
query_cache_limit       = 8M
query_cache_size        = 32M
query_cache_type        = 1

max_connections         = 250

# log-bin should be on a disk with enough free space
#log-bin=/x/home/mysql/logs/binary/mysql_binary_log

# For MySQL version 5.1.8 or later. Comment out binlog_format for older versions.
#binlog_format           = mixed

read_buffer_size = 2M
read_rnd_buffer_size = 16M
sort_buffer_size = 8M
join_buffer_size = 8M

# InnoDB settings
innodb_file_per_table = 1
innodb_flush_log_at_trx_commit  = 2
#innodb_log_buffer_size          = 50M

#256MB for every 2GB of RAM installed
innodb_buffer_pool_size         = 256M

#innodb_thread_concurrency = 2 * (cpu cores + disks)
innodb_thread_concurrency       = 4 

innodb_flush_method             = O_DIRECT
#innodb_log_file_size = 50M

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
</code></pre>

<p>Start MySQL</p>

<pre><code>sudo service mysql start
</code></pre>

<p>If MySQL fails to start, run the following for error indications
<code>
cat /var/log/mysql/error.log
</code></p>

<p>Install the MySQL JDBC connector</p>

<pre><code>sudo apt-get install libmysql-java
</code></pre>

<p>Now create the indicated databases and users (with the shown password) using the MySQL CLI or phpMyAdmin. Once everything has been created with the appropriate passwords, click Continue.</p></li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing, Configuring and Testing Bacula]]></title>
    <link href="http://boldlycoding.com/blog/2014/12/26/installing-bacula/"/>
    <updated>2014-12-26T04:07:10-05:00</updated>
    <id>http://boldlycoding.com/blog/2014/12/26/installing-bacula</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Installation</h2>

<p>Cloudera Manager and Hadoop installations can be unstable so having backups of the file system becomes very important. Bacula create full, incremental, and differential backups of the filesystem. It support configuration of the backed up directory and exclusions to each backup. Bacula also allows restoration of previously created backups. To create these backups, restore files properly, and maintain other internal information, Bacula requires MySQL to be installed.</p>

<ol>
<li><p>To begin the install, issue the command:</p>

<pre><code class="`"> sudo apt-get install bacula-server bacula-client
</code></pre>

<p> To simply the install process, select Yes when asked if dbconfig-common should be used. This requires entering the database administrator password.</p></li>
<li><p>Create the directories to store Bacula&rsquo;s backup and restoration files</p>

<pre><code class="`"> sudo mkdir -p /bacula/backup /bacula/restore
</code></pre>

<p> Also, change permission so Bacula create correctly read and write.</p>

<pre><code class="`"> sudo chown -R bacula:bacula /bacula
 sudo chmod -R 700 /bacula
</code></pre></li>
<li><p>Now, Bacula must be configured to backup and restore to appropriate locations. To begin, the <em>bacula-dir.conf</em> file must be edited (The next three steps edit this file as well).</p>

<pre><code class="`"> sudo nano /etc/bacula/bacula-dir.conf
</code></pre>

<p> Within the <em>Job</em> under the comment block beginning <em>Standard Restore Template</em>, change the Where setting. To restore files in their original location it should be set to /. To restore them to the previously created directory, set it to <em>/bacula/restore</em>.</p>

<p> I configured my install to restore to the original locations</p>

<pre><code class="`"> Job {
   Name = "RestoreFiles"
   Type = Restore
   Client=Blank-fd
   FileSet="Full Set"
   Storage = File
   Pool = Default
   Messages = Standard
   Where = /
 }
</code></pre></li>
<li><p>To conserve disk space, I configured Bacula to use GZIP compression. This is found in the options section of the FileSet listed under the comment <em>List of files to be backed up</em></p>

<pre><code class="`"> Include {
     Options {
         signature = MD5
         compression = GZIP
     }
 }
</code></pre></li>
<li><p>Then set file to / to back up the entire file system. This option is found after the compression option under the next comment block.</p>

<pre><code class="`"> File = /
</code></pre></li>
<li><p>Now, configure Bacula to exclude its own file path. This is found in the exclude section, which should be just beyond the file option.</p>

<pre><code class="`"> Exclude {
     File = /var/lib/bacula
     File = /bacula
     File = /proc
     File = /tmp
     File = /.journal
     File = /.fsck
 }
</code></pre></li>
<li><p>Next, Bacula must be configured to back up the files described in the Job to the appropriate location. Backup locations are defined in <em>/etc/bacula/bacula-sd.conf</em></p>

<pre><code class="`"> sudo nano /etc/bacula/bacula-sd.conf
</code></pre>

<p> Under to comment block beginning <em>Devices supported by this Storage daemon</em>, change the Device group to</p>

<pre><code class="`"> Device {
   Name = FileStorage
   Media Type = File
   Archive Device = /bacula/backup
   LabelMedia = yes;                   # lets Bacula label unlabeled media
   Random Access = Yes;
   AutomaticMount = yes;               # when device opened, read it
   RemovableMedia = no;
   AlwaysOpen = no;
 }
</code></pre>

<p> This sets the backup location to the directory created in a previous step.</p></li>
<li><p>To validate the edited configuration, two command should be issued. If no errors are found, the command will return nothing.</p>

<pre><code class="`"> sudo bacula-dir -tc /etc/bacula/bacula-dir.conf
 sudo bacula-sd -tc /etc/bacula/bacula-sd.conf
</code></pre></li>
<li><p>Now, the Bacula services must be restarted to use the new configuration.</p>

<pre><code class="`"> sudo service bacula-sd restart
 sudo service bacula-director restart
</code></pre></li>
</ol>


<h2>Testing Bacula</h2>

<ol>
<li><p>Bacula backups and restores are started from Bacula&rsquo;s console, it can be started with</p>

<pre><code class="`"> sudo bconsole
</code></pre></li>
<li><p>To label the archive file created by the backup job that will be started in a later step use the command</p>

<pre><code class="`"> label
</code></pre>

<p> It will prompt for a name, something like Initial_Backup can be entered.</p></li>
<li><p>Next, the type of storage &ldquo;pool&rdquo;, to store the backup as a <em>File</em>, or archive select option 2 when prompted.</p></li>
<li><p>To begin the backup operation</p>

<pre><code class="`"> run
</code></pre>

<p> Select option 1, <em>BackupClient1</em>, to select the Job configured in the previous steps. This selects a full backup operation since this is the first backup made. If this job is done in the future, an incremental backup will be done. This can be reconfigured in the Job settings.</p></li>
<li><p>To confirm the selections and start the backup type</p>

<pre><code class="`"> yes
</code></pre>

<p> To view output generated by the job use the command</p>

<pre><code class="`"> messages
</code></pre>

<p> When the backup has finished, <em>Backup: OK</em> will be displayed. To exit the console type</p>

<pre><code class="`"> exit
</code></pre></li>
</ol>


<h2>Restoring Files</h2>

<p>When restoring files from a Bacula backup, a full backup must be restored before any incremental backups.</p>

<p>To list all the backup jobs that have been executed use from the Bacula console</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>list jobs</span></code></pre></td></tr></table></div></figure>


<ol>
<li><p>To restore all the files automatically type</p>

<pre><code class="`"> restore all
</code></pre></li>
<li><p>Then use option 5 to select the most recent backup. All files will be preselected from the most recent backup for restoration since <em>all</em> was used. If all is not specified, files can be selected from the tree for restoration.</p></li>
<li><p>To finish file selection type</p>

<pre><code class="`"> done
</code></pre></li>
<li><p>Like during the backup procedure the following can be typed to view generated output</p>

<pre><code class="`"> messages
</code></pre></li>
<li><p>When restoration has been completed type</p>

<pre><code class="`"> exit
</code></pre></li>
</ol>


<p>This covers a very basic restoration process. Documentation for the restore command exists here, for more advanced needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing phpMyAdmin]]></title>
    <link href="http://boldlycoding.com/blog/2014/12/24/installing-phpmyadmin/"/>
    <updated>2014-12-24T13:30:41-05:00</updated>
    <id>http://boldlycoding.com/blog/2014/12/24/installing-phpmyadmin</id>
    <content type="html"><![CDATA[<!-- more -->


<p>phpMyAdmin simplies the task of database administration for all services running in the cluster. It is also incredibly useful when developing your own applications. Although the command line is still useful for certain DBA tasks, phpMyAdmin makes many faster and easier.</p>

<ol>
<li><p>To begin the installation issue the following command:</p>

<pre><code class="`"> sudo apt-get install phpmyadmin apache2-utils
</code></pre>

<p> Installing apache2-utils allows for the configuration of user restrictions if desired later.</p></li>
<li><p>When prompted, select apache2 to be automatically configured.</p></li>
<li><p>Next, select Yes when asked if dbconfig-common should configure the database. The administrative password for MySQL will be needed.</p></li>
<li><p>Navigate to:</p>

<pre><code class="`"> hostip/phpmyadmin
</code></pre>

<p> The installation should have configured Apache to serve phpMyAdmin. If for some reason phpMyAdmin was inaccessible, inspect:</p>

<pre><code class="`"> /etc/apache2/apache2.conf
</code></pre>

<p> and add, this line if needed</p>

<pre><code class="`"> Include /etc/phpmyadmin/apache.conf
</code></pre>

<p> Then restart apache</p>

<pre><code class="`"> Include /etc/phpmyadmin/apache.conf
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cluster Machine Setup and Prep]]></title>
    <link href="http://boldlycoding.com/blog/2014/12/21/cluster-machine-setup-and-prep/"/>
    <updated>2014-12-21T07:31:53-05:00</updated>
    <id>http://boldlycoding.com/blog/2014/12/21/cluster-machine-setup-and-prep</id>
    <content type="html"><![CDATA[<!-- more -->


<h2>Installing the OS</h2>

<p>All machines in the cluster will use Cloudera Manager, mentioned in a previous post. Cloudera Manager <a href="http://www.cloudera.com/content/cloudera/en/documentation/core/latest/topics/cm_ig_cm_requirements.html" title="Cloudera Manager Requirements">requires</a> that all machines running the manager, and being managed, have a supported 64-bit OS installed. The following process should be followed on all nodes in the cluster</p>

<ol>
<li><p>Through experience I have found that CDH, a component of Cloudera Manager, runs smootly on Ubuntu 12.04 (Precise). Precise can be downloaded <a href="http://releases.ubuntu.com/12.04/" title="Ubuntu 12.04 Download">here</a>. For this project, a server installation was appropriate. There are many web interfaces and no substantial need for a desktop interface.</p></li>
<li><p>Start the OS installation and configure appropriate regional settings including language and keyboard layout.</p></li>
<li><p>The installation will ask for a hostname. All machines in the cluster should have a unique hostname. In my cluster I configured the machines as typhlosion, quilava and cyndaquil where typhlosion is the master of the cluster and the other two machines are slaves.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/3_hostname.png" width="550" height="750" title="Set up each host with an appropiate hostname" ></p></li>
<li><p>The Ubuntu installation will then prompt for a username.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/4_username.png" width="550" height="750" title="Enter an appropriate username" ></p></li>
<li><p>Enter and verify a memorable password.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/5_password.PNG" width="550" height="750" title="Enter an appropriate password" ></p></li>
<li><p>For my project, I chose not to encrypt my home directory.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/6_encrypt.PNG" width="550" height="750" title="Encrypt your directory?" ></p></li>
<li><p>An appropiate time zone should then be selected. I have seen references to problem occurring with CDH/Cloudera Manager when configuration options related to time are not set correctly, so ensure the correct time zone is selected on all machines in the cluster.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/7_timezone.PNG" width="550" height="750" title="Set and appropiate time zone" ></p></li>
<li><p>On the cluster machines, I elected to use the entire disk without LVM for simplicity&rsquo;s sake. Following this step you will need to confirm the disk to partition.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/8_lvm.PNG" width="550" height="750" title="Use LVM?" ></p></li>
<li><p>Finally, the installation will confirm and then write all changes to disk. Assuming everything on your screen is correct, select yes and wait for the files to be written.</p>

<p> <img class="center" src="http://boldlycoding.com/images/os/9_write.PNG" width="550" height="750" title="Write changes to disk" ></p></li>
<li><p>Following a lengthy file write, the installation will ask about an HTTP proxy. This was not required for my set up and thus I left the field blank. The installation will then continue writing files.</p></li>
<li><p>The installation now asks about Automatic Updating. Like many tech envoinments where change is not tolerated, Cloudera Manager and Hadoop are no different. Hadoop particularly does not deal well with changes in its environment. Keeping this in mind I selected no automatic updating to use my own discretion, and the installation continued.</p>

<p><img class="center" src="http://boldlycoding.com/images/os/11_updates.PNG" width="550" height="750" title="No updates!" ></p></li>
<li><p>Next, software needs to be selected for installation. The spacebar is used for selection and enter confirms selections. The selections will differ based on the type of cluster node. The OpenSSH server <strong>must</strong> be installed on <strong>all</strong> nodes in the cluster. Cloudera Manager and Hadoop use SSH. The LAMP server package should be installed on the master of the cluster (typhlosion in my case) if, like myself, MySQL is more appealing than a PostgreSQL database. Cloudera Manager can store all of its data in a MySQL database and the backup agent Bacula (to be described later) requires a MySQL installation. The slaves of the cluster do not require LAMP to be installed but if more then one of the components are needed, it is not a bad idea to install those now. For my cluster, I only need MySQL on the slaves, so I install that separately to reduce the number of extraneous services. Of course, if any of the other listed components are needed, they should be selected for installation now.</p>

<p><img class="center" src="http://boldlycoding.com/images/os/12_software.PNG" width="550" height="750" title="Software selection" ></p></li>
<li><p>If installing MySQL, the installation will display a prompt for a root user password. In this test cluster, I use the same password for all services to simplify the setup process. After entering the password, the installer will request confirmation and then continue writing files.</p>

<p><img class="center" src="http://boldlycoding.com/images/os/13_mysqlpassword.PNG" width="550" height="750" title="Enter a MySQL password" ></p></li>
<li><p>Finally, assuming no other OS is detected, select Yes and GRUB will be installed directly to the MBR. I do not recommend running multiple operating systems in a server environment. After GRUB is written the installation will complete and the machine will reboot after Continue is selected.</p>

<p><img class="center" src="http://boldlycoding.com/images/os/14_grub.PNG" width="550" height="750" title="Install GRUB" ></p></li>
</ol>


<h2>Configuring the OS</h2>

<p>All nodes in the cluster must be able to communicate with the other nodes. To simplify communication among the cluster nodes, each will be configured with a static IP address. The addresses will then be added to each node&rsquo;s <em>hosts</em> file.</p>

<ol>
<li><p>To configure a static IP address the following command should be issued:</p>

<pre><code class="`"> sudo nano /etc/network/interfaces
</code></pre>

<p> Change the file to (with appropriate addresses for the network):</p>

<pre><code class="`"> auto lo
 iface lo inet loopback

 iface eth0 inet static
 address 10.1.0.113
 gateway 10.1.0.1
 netmask 255.255.255.0
 dns-nameservers 8.8.8.8 8.8.4.4
</code></pre></li>
<li><p>Reboot the machine</p></li>
<li><p>Issue the following command. If everything was configured properly, there will not be any packet loss.</p>

<pre><code class="`"> ping -c 5 www.google.com
</code></pre></li>
<li><p>Repeat the process with the other nodes in the cluster.</p></li>
<li><p>After rebooting the other nodes, the <em>hosts</em> files will need to be edited. On each node issue the following command:</p>

<pre><code class="`"> sudo nano /etc/hosts
</code></pre>

<p> Change the file to:</p>

<pre><code class="`"> 127.0.0.1       localhost
 10.0.2.15       typhlosion typhlosion
</code></pre></li>
<li><p>Attempt to ping nodes from each other using the command</p>

<pre><code class="`"> ping -c 5 hostname
</code></pre></li>
<li><p>For steps later in the cluster setup, it is helpful to have tmux installed. Tmux is a terminal multiplexer and allows the control of multiple programs from one terminal. Also, tmux will save your session in the event of a disconnect. This is very help when installing Cloudera Manager which does not easily tolerate interuptions to the install process. To insatll tmux, run</p>

<pre><code class="`"> sudo apt-get install tmux
</code></pre>

<p> After the OSs on all the nodes in the cluster have been configured, the utility applications phpMyAdmin and Bacula can be installed. PhpMyAdmin will speed up database setup. Bacula creates a backup of the file system that can be restored if something goes wrong later when making changes. Following the installation of these tools, Cloudera Manager can be installed.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
